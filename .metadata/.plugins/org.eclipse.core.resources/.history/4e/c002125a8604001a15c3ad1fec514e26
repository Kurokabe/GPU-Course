#include "Indice2D.h"
#include "Indice1D.h"
#include "cudaTools.h"
#include "ReductionAddTools.h"
#include <stdio.h>

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void kernelHistogramme(unsigned char *tabDataGM, unsigned char *tabFrequenceGM, int n);
__device__ void clearTabSM(int *tabSM);
__device__ void reductionIntraThreadSM(int *tabSM, int *tabDataGM, int n);
__device__ void reductionInterBlock(int *tabSM, int *tabFrequenceGM, int n);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void kernelHistogramme(int *tabDataGM, int *tabFrequenceGM, int n)
    {
    extern __shared__ int tabSM[];
    // TODO clear tabSM
    clearTabSM(tabSM);
    reductionIntraThread(tabSM, tabDataGM, n);
    __syncthreads();
    reductionInterBlock(tabSM, tabFrequenceGM, n);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/
__device__ void clearTabSM(int *tabSM)
    {
    const int TID = threadIdx.x + (blockIdx.x * blockDim.x); //global à la grille
    const int TID_LOCAL = threadIdx.x;
    const int NB_THREAD = blockDim.x * gridDim.x; //nbThreadTotal

    int s = TID;
    while (s < 256)
	{
	tabSM[s] = 0;
	}
    }
__device__ void reductionIntraThreadSM(int *tabSM, int *tabDataGM, int nbSlice)
    {
    const int TID = threadIdx.x + (blockIdx.x * blockDim.x); //global à la grille
    const int TID_LOCAL = threadIdx.x;
    const int NB_THREAD = blockDim.x * gridDim.x; //nbThreadTotal

    int s = TID;
    while (s < n)
	{
	atomicADD(&tabSM[tabDataGM[s]], 1);
	s += NB_THREAD;
	}
    }

__device__ void reductionInterBlock(int *tabSM, int *tabFrequenceGM)
    {

    if (threadIdx.x == 0)
	{
	for (int i = 0; i < 256; i++)
	    {
	    atomicAdd(&tabFrequenceGM[i], tabSM[i]);
	    }
	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
